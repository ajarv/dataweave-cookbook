= Operators

== Map

=== Using Map on an Array

Returns an array that is the result of applying a transformation function (lambda) to each of the elements.
The lambda is invoked with two parameters: *index* and the *value*.
If these parameters are not named, the index is defined by default as *$$* and the value as *$*.

.Transform
[source, ruby]
---------------------------------------------------------------------
%dw 1.0
%output application/json
---
users: ["jhon", "petter", "mat"] map  upper $
---------------------------------------------------------------------

.Output
[source,json]
---------------------------------------------------------------------
{
  "users": [
  "JHON",
  "PETTER",
  "MAT"
  ]
}
---------------------------------------------------------------------

In the following example, custom names are defined for the index and value parameters of the map operation, and then both are used to construct the returned value. In this case value is defined as *firstName* and indexes in the array is defined as *position*.

.Transform
[source, ruby]
---------------------------------------------------------------------
%dw 1.0
%output application/json
---
users: ["jhon", "petter", "mat"] map ((firstName, position) -> position ++ ":" ++ upper firstName)
---------------------------------------------------------------------

.Output
[source,json]
---------------------------------------------------------------------
{
  "users": [
    "0:JHON",
    "1:PETTER",
    "2:MAT"
  ]
}
---------------------------------------------------------------------


=== Using Map on an Object

Returns an array with the values that result out of applying a transformation function (lambda) to each of the values in the object. The keys of the original object are all ignored by this operation and the object is treated as an array. To have access to the keys you can use the operation *mapObject* instead.
The lambda is invoked with two parameters: *index* and the *value*.
If these parameters are not named, the index is defined by default as *$$* and the value as *$*. The index refers to the position of a key value pair when the object is treated as an array.

.Input
[source,xml]
--------------------------------------------------------
<prices>
    <basic>9.99</basic>
    <premium>53</premium>
    <vip>398.99</vip>
</prices>
--------------------------------------------------------

.Mapping
[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
%var conversionRate=13.45
---
priceList: payload.prices map (
  '$$':{
    dolars: $,
    localCurrency: $ * conversionRate
  }
)
--------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------
{
  "priceList": [
    {
      "0": {
        "dolars": "9.99",
        "localCurrency": 134.3655
      }
    },
    {
      "1": {
        "dolars": "53",
        "localCurrency": 712.85
      }
    },
    {
      "2": {
        "dolars": "398.99",
        "localCurrency": 5366.4155
      }
    }
  ]
}
--------------------------------------------------------

[TIP]
Note that when you use a parameter to populate one of the keys of your output, as with the case of $$ in this example, you must either enclose it in quote marks or brackets. '$$' or ($$) are both equally valid.

In the example above, as key and value are not defined, they're identified by the placeholders *$$* and *$*.
For each key:value pair in the input, an object is created and placed in an array of objects. Each of these objects contains two properties:
one of these directly uses the value, the other multiplies this value by a constant that is defined as a directive in the header.

The mapping below performs exactly the same transform, but it defines custom names for the properties of the operation, instead of using $ and $$. Here, 'position' is defined as referring to the array index, and 'money' to the value in that index.

.Mapping
[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
%var conversionRate=13.45
---
priceList: payload.prices map ((money, position) ->
  '$position':{
    dolars: money,
    localCurrency: money * conversionRate
  }
)
--------------------------------------------------------

[TIP]
Note that when you use a parameter to populate one of the keys of your output, as with the case of *position* in this example, you must either enclose it in brackets or enclose it in quote marks adding a $ to it, otherwise the name of the property will be taken as a literal string. '$position' or (position) are both equally valid.

== Map Object

Similar to Map, but instead of processing only the values of an object, it processes both keys and values, and instead of returning an array with the results of processing these values through the lambda, it returns an object with the key:value pairs that result from processing both key and value of the object through the lambda.

The lambda is invoked with two parameters: *key* and the *value*.
If these parameters are not named, the key is defined by default as *$$* and the value as *$*.

.Input
[source,xml]
--------------------------------------------------------
<prices>
    <basic>9.99</basic>
    <premium>53</premium>
    <vip>398.99</vip>
</prices>
--------------------------------------------------------

.Mapping
[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
%var conversionRate=13.45
---
priceList: payload.prices mapObject (
  '$$':{
    dolars: $,
    localCurrency: $ * conversionRate
  }
)
--------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------
{
  "priceList": {
    "basic": {
      "dolars": "9.99",
      "localCurrency": 134.3655
    },
    "premium": {
      "dolars": "53",
      "localCurrency": 712.85
    },
    "vip": {
      "dolars": "398.99",
      "localCurrency": 5366.4155
    }
  }
}
--------------------------------------------------------

[TIP]
Note that when you use a parameter to populate one of the keys of your output, as with the case of $$ in this example, you must either enclose it in quote marks or brackets. '$$' or ($$) are both equally valid.

In the example above, as key and value are not defined, they're identified by the placeholders *$$* and *$*.
For each key:value pair in the input, the key is preserved and the value becomes an object with two properties:
one of these is the original value, the other is the result of multiplying this value by a constant that is defined as a directive in the header.

The mapping below performs exactly the same transform, but it defines custom names for the properties of the operation, instead of using $ and $$. Here, 'category' is defined as referring to the original key in the object, and 'money' to the value in that key.

.Mapping
[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
%var conversionRate=13.45
---
priceList: payload.prices mapObject ((money, category) ->
  '$category':{
    dolars: money,
    localCurrency: money * conversionRate
  }
)
--------------------------------------------------------

[TIP]
Note that when you use a parameter to populate one of the keys of your output, as with the case of *category* in this example, you must either enclose it in brackets or enclose it in quote marks adding a $ to it, otherwise the name of the property will be taken as a literal string. '$category' or (category) are both equally valid.

== Pluck

Pluck is useful for mapping an object into an array. Pluck is an alternate mapping mechanism to mapObject. Like mapObject, pluck executes a lambda over every key-value pair
 in its processed object, but instead of returning an object, it returns an array, which may be built from either the values or the keys in the object.

The lambda is invoked with two parameters: *key* and the *value*.
If these parameters are not named, the key is defined by default as *$$* and the value as *$*.

.Input
[source,xml]
--------------------------------------------------------
<prices>
    <basic>9.99</basic>
    <premium>53</premium>
    <vip>398.99</vip>
</prices>
--------------------------------------------------------

.Transform
[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
result: {
  keys: payload.prices pluck $$,
  values: payload.prices pluck $
}
--------------------------------------------------------

.Output

[source,json]
--------------------------------------------------------
{
  "result": {
    "keys": [
      "basic",
      "premium",
      "vip"
    ],
    "values": [
      "9.99",
      "53",
      "398.99"
    ]
  }
}
--------------------------------------------------------

== Filter

=== Using Filter on an Object

Returns an object with the key:value pairs that pass the acceptance criteria defined in the lambda.
If these parameters are not named, the key is defined by default as *$$* and the value as *$*.

.Mapping

[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/xml
---
filtered: {
  aa: "a", bb: "b", cc: "c", dd: "d"
} filter $ == "d" <1>
--------------------------------------------------------

<1> Filters the all key:value pairs with value "d" => {dd:d}

.Result

[source,xml]
--------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<filtered>
  <dd>d</dd>
</filtered>
--------------------------------------------------------

=== Using Filter on an Array

Returns an array that only contains those that pass the criteria specified in the lambda. The lambda is invoked with two parameters: *index* and the *value*.
If these parameters are not named, the index is defined by default as *$$* and the value as *$*.

.Transform
[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  biggerThanTwo: [0, 1, 2, 3, 4, 5] filter $ > 2
}
-----------------------------------------------------------------

.Output
[source,json]
-----------------------------------------------------------------
{
  "biggerThanTwo": [3,4,5]
}
-----------------------------------------------------------------


== Remove

=== Using Remove on an Object

When running it on an object, it returns another object where the specified keys are removed.

.Transform
[source,ruby]
-------------------------------------------------------
%dw 1.0
%output application/xml
---
myObject: {aa: "a", bb: "b"} - "aa"
-------------------------------------------------------

.Output
[source,xml]
-------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<myObject>
  <bb>b</bb>
</myObject>
-------------------------------------------------------

The above example removes the key 'aa' from {aa: "a", bb: "b"} => {bb: "b"}

=== Using Remove on an Array

When running it on an array, it returns another array where the specified indexes are removed.

.Transform
[source, ruby]
-----------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  aa: ["a", "b", "c"] - 1
}
-----------------------------------------------------------------------

.Output
[source,json]
-----------------------------------------------------------------------
{
  "aa": [a, c]
}
-----------------------------------------------------------------------

== Default

Assigns a default value in case no value is found in the input field.

.Transform
[source, ruby]
-----------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
    currency: payload.currency default "USD"
}
-----------------------------------------------------------------------

== When / Otherwise

The keyword *when* conditionally evaluates a part of your Dataweave code, depending on if an expression evaluates to true or to false. You can make a single line conditional, or enclose a whole section in curly brackets. In case the *when* expression evaluates to *false*, its corresponding part of the code is ignored, and the code that corresponds to the *otherwise* expression is executed.

.Transform
[source, ruby]
-----------------------------------------------------------------------
%dw 1.0
%input payload application/json
%output application/json
---
{
  currency: "USD"
} when payload.country == "USA"
otherwise
{
      currency: "EUR"
}
-----------------------------------------------------------------------

== Unless / Otherwise

The keyword *unless* conditionally evaluates a part of your Dataweave code, depending on if an expression evaluates to true or to false. You can make a single line conditional, or enclose a whole section in curly brackets. In case the *unless* expression evaluates to *true*, its corresponding part of the code is ignored, and the code that corresponds to the *otherwise* expression is executed.

.Transform
[source, ruby]
-----------------------------------------------------------------------
%dw 1.0
%input payload application/json
%output application/json
---
{
  currency: "EUR"
} unless payload.country == "USA"
otherwise
{
      currency: "USD"
}
-----------------------------------------------------------------------

== AND

The expression *and* (in lower case) can be used to link multiple conditions, its use means that all of the linked conditions must evaluate to true for the expression as a whole to evaluate to true.

.Transform
[source, ruby]
-----------------------------------------------------------------------
%dw 1.0
%input payload application/json
%output application/json
---
{
  currency: "USD"
} when payload.country == "USA" and payload.currency == "local"
otherwise
{
      currency: "EUR"
}
-----------------------------------------------------------------------

In the example above, currency will be "EUR", unless the payload has BOTH conditions met.

== OR

The expression *or* (in lower case) can be used to link multiple conditions, its use means that either one or all of the linked conditions must evaluate to true for the expression as a whole to evaluate to true.

.Transform
[source, ruby]
-----------------------------------------------------------------------
%dw 1.0
%input payload application/json
%output application/json
---
{
  currency: "EUR"
} when payload.country == "Italy" or payload.country == "Germany" or payload.country == "Spain" or payload.country == "Portugal" or payload.country == "France" or payload.country == "Greece"
otherwise
{
      currency: "USD"
}
-----------------------------------------------------------------------

In the example above, currency will be "EUR", only when one of the conditions evaluates to true.

== Concat

=== Using Concat on an Object

Returns the resulting object of concatenating two existing objects.

.Transform
[source,ruby]
--------------------------------------------------------
%dw 1.0
%output application/xml
---
concat: {aa: "a"} ++ {cc: "c"}
--------------------------------------------------------

.Output
[source,xml]
--------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<concat>
  <aa>a</aa>
  <cc>c</cc>
</concat>
--------------------------------------------------------

The example above concatenates object {aa: a} and {cc: c} in a single one => {aa: a , cc: c}

=== Using Concat on an Array

When using arrays, it returns the resulting array of concatenating two existing arrays.

.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: [0, 1, 2] ++ [3, 4, 5]
}
----------------------------------------------------------------------

.Output
[source,json]
----------------------------------------------------------------------
{
  "a": [0, 1, 2, 3, 4, 5]
}
----------------------------------------------------------------------

=== Using Concat on a String

Strings are treated as arrays of characters, so the operation works just the same with strings.

.Transform
[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  name: "Mule" ++ "Soft"
}
--------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------
{
  "name": MuleSoft
}
--------------------------------------------------------


== AS (Type Coercion)

Coerce the given value to the specified type

=== Coerce to string

Any simple types can be coerced to string. If formatting is required (i.e number or date) the format schema property can be used
.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: 1 as :string {format: "##,#"},
  b: now as :string {format: "yyyy-MM-dd"},
  c: true as :string
}
----------------------------------------------------------------------

.Output
[source,json]
-----
{
  "a": "1",
  "b": "2015-07-07",
  "c": "true"
}
-----

=== Coerce to number

A string can be coerced to number. If the given number has a specific format the schema property can be used

.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: "1" as :number
}
----------------------------------------------------------------------

.Output
[source, json]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  "a": 1
}
----------------------------------------------------------------------

=== Coerce to dates

Date types can be coerced from string or number

.Transform
[source,ruby]
----
%dw 1.0
%output application/json
---
{
 a: 1436287232 as :datetime,
 b: "2015-10-07 16:40:32.000" as :localdatetime {format: "yyyy-MM-dd HH:mm:ss.SSS"}
}
----
.Output
[source,json]
----
{
  "a": "2015-07-07T16:40:32Z",
  "b": "2015-10-07 16:40:32.000"
}
----

== Flatten

If you have an array of arrays, this function can flatten it into a single simple array.

.Input
[source,json]
----------------------------------------------------------------------
[
   [3,5],
   [9,5],
   [154,0.3]
]
----------------------------------------------------------------------

.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%input payload application/json
%output application/json
---
flatten payload
----------------------------------------------------------------------

.Output
[source,json]
----------------------------------------------------------------------
[
  3,
  5,
  9,
  5,
  154,
  0.3
]
----------------------------------------------------------------------

== Size Of

Returns the number of elements in an array (or anything that can be converted to an array)

.Transform
[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
----
{
  arraySize: sizeOf [1,2,3],
  textSize: sizeOf "MuleSoft",
  objectSize: sizeOf {a:1,b:2}
}

-----------------------------------------------------------------

.Output
[source,json]
-----------------------------------------------------------------
{
  "arraySize": 3,
  "textSize": 8,
  "objectSize": 2
}
-----------------------------------------------------------------

== Push

Pushes a new element to the end of an array

.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
aa: [0, 1, 2] + 5
----------------------------------------------------------------------

.Output
[source,json]
----------------------------------------------------------------------
{
  "aa": [0, 1, 2, 5]
}
----------------------------------------------------------------------

== Reduce

Applies a reduction to the array. The lambda is invoked with two parameters:
the accumulator (*$$*) and the value (*$*).
Unless specified, the accumulator by default takes the first value of the array.

.Tranfrom
[source, ruby]
--------------------------------------------------------------------
%dw 1.0
%output application/json
---
sum: [0, 1, 2, 3, 4, 5] reduce $$ + $
--------------------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------------------
{
  "sum": 15
}
--------------------------------------------------------------------

.Transform
[source, ruby]
--------------------------------------------------------------------
%dw 1.0
%output application/json
---
concat: ["a", "b", "c", "d"] reduce $$ ++ $
--------------------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------------------
{
  "concat": "abcd"
}
--------------------------------------------------------------------

In some cases, you may want to not use the first element of the array as an accumulator. To set the accumulator to be something else, you must define this in a lambda.

.Transform
[source, ruby]
--------------------------------------------------------------------
%dw 1.0
%output application/json
---
concat: ["a", "b", "c", "d"] reduce ((val, acc = "z") -> acc ++ val)
--------------------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------------------
{
  "concat": "zabcd"
}
--------------------------------------------------------------------


== Join By

Merges an array into a single string value, using the provided string as a separator between elements.

.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
aa: ["a","b","c"] joinBy "-"
----------------------------------------------------------------------

.Output
[source,json]
----------------------------------------------------------------------
{
  "aa": "a-b-c"
}
----------------------------------------------------------------------

== Split By

Performs the opposite operation as Join By. It splits a string into an array of separate elements, looking for instances of the provided string and using it as a separator.

.Transform
[source, ruby]
----------------------------------------------------------------------
%dw 1.0
%output application/json
---
split: "a-b-c" splitBy "-"
----------------------------------------------------------------------

.Output
[source,json]
----------------------------------------------------------------------
{
  "split": ["a","b","c"]
}
----------------------------------------------------------------------

== Order By

Returns the provided array ordered according to the value returned by the lambda. The lambda is invoked with two parameters: *index* and the *value*.
If these parameters are not named, the index is defined by default as *$$* and the value as *$*.

.Transform
[source, ruby]
--------------------------------------------------------------------
%dw 1.0
%output application/json
---
orderByLeter: [{ letter: "d" }, { letter: "e" }, { letter: "c" }, { letter: "a" }, { letter: "b" }] orderBy $.letter
--------------------------------------------------------------------

.Output
[source,json]
--------------------------------------------------------------------
{
  "orderByLeter": [
    {
      "letter": "a"
    },
    {
      "letter": "b"
    },
    {
      "letter": "c"
    },
    {
      "letter": "d"
    },
    {
      "letter": "e"
    }
  ]
}
--------------------------------------------------------------------


== Group By

Partitions an array into a Object that contains Arrays, according to the discriminator lambda you define.
The lambda is invoked with two parameters: *index* and the *value*.
If these parameters are not named, the index is defined by default as *$$* and the value as *$*.


.Input
[source,json]
-----------------------------------------------------------------
{
  "langs": [
    {
      "name": "Foo",
      "language": "Java"
    },
    {
      "name": "Bar",
      "language": "Scala"
    },
    {
      "name": "FooBar",
      "language": "Java"
    }
  ]
}
-----------------------------------------------------------------

.Transform
[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
---
"language": payload.langs groupBy $.language
-----------------------------------------------------------------

.Output
[source,json]
-----------------------------------------------------------------
{
  "language": {
    "Scala": [
        {"name":"Bar", "language":"Scala"}
      ],
    "Java": [
        {"name":"Foo", "language":"Java"},
        {"name":"FooBar", "language":"Java"}
      ]
  }
}
-----------------------------------------------------------------

== Distinct By

Returns only unique values from an array that may have duplicates.
The lambda is invoked with two parameters: *index* and *value*.
If these parameters are not defined, the index is defined by default as $$ and the value as $.

.Input
[source,json]
-----------------------------------------------------------------
{
  "title": "XQuery Kick Start",
  "author": [
    "James McGovern",
    "Per Bothner",
    "Kurt Cagle",
    "James Linn",
    "Kurt Cagle",
    "Kurt Cagle",
    "Kurt Cagle",
    "Vaidyanathan Nagarajan"
  ],
  "year":"2000"
}
-----------------------------------------------------------------

.Transform
[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
---
{

  	book : {
      title : payload.title,
      year: payload.year,
      authors: payload.author distinctBy $
    }
}
-----------------------------------------------------------------

.Output
[source,json]
-----------------------------------------------------------------
{
  "book": {
    "title": "XQuery Kick Start",
    "year": "2000",
    "authors": [
      "James McGovern",
      "Per Bothner",
      "Kurt Cagle",
      "James Linn",
      "Vaidyanathan Nagarajan"
    ]
  }
}
-----------------------------------------------------------------


== Replace

Replaces a section of a string for another, in accordance to a regular expression, and returns a modified string

.Transform
[source, ruby]
------------------------------------------------------------------
%dw 1.0
%output application/json
---
b: "admin123" replace /(\d+)/ with "ID"
------------------------------------------------------------------

.Output
[source,json]
------------------------------------------------------------------
{
  "b": "adminID"
}
------------------------------------------------------------------

== Matches

Matches a string against a regular expression, and returns *true* or *false*

.Transform
[source, ruby]
------------------------------------------------------------------
%dw 1.0
%output application/json
---
b: "admin123" matches /(\d+)/
------------------------------------------------------------------

.Output
[source,json]
------------------------------------------------------------------
{
  "b": false
}
------------------------------------------------------------------

== Match

Match a string against a regular expression, it returns an array that contains the entire matching expression, followed by all of the capture groups that match the provided regex.

.Transform
[source, ruby]
------------------------------------------------------------------
%dw 1.0
%output application/json
---
  hello: "anniepoint@mulesoft.com" match /([a-z]*)@([a-z]*).com/
------------------------------------------------------------------

.Output
[source,json]
------------------------------------------------------------------
{
  "hello": [
    "anniepoint@mulesoft.com",
    "anniepoint",
    "mulesoft"
  ]
}
------------------------------------------------------------------

In the example above, we see that the search regular expression describes an email address. It contains two capture groups, what's before and what's after the @. The result is an array of three elements: the first is the whole email address, the second matches one of the capture groups, the third matches the other one.

== Scan

Returns an array with all of the matches in the given string. Each match is returned as an array that contains the complete match, as well as any capture groups there may be in your regular expression.

.Transform
[source, ruby]
------------------------------------------------------------------
%dw 1.0
%output application/json
---
  hello: "anniepoint@mulesoft.com,max@mulesoft.com" scan /([a-z]*)@([a-z]*).com/
------------------------------------------------------------------

.Output
[source,json]
------------------------------------------------------------------
{
  "hello": [
    [
      "anniepoint@mulesoft.com",
      "anniepoint",
      "mulesoft"
    ],
    [
      "max@mulesoft.com",
      "max",
      "mulesoft"
    ]
  ]
}
------------------------------------------------------------------

In the example above, we see that the search regular expression describes an email address. It contains two capture groups, what's before and what's after the @. The result is an array with two matches, as there are two email addresses in the input string. Each of these matches is an array of three elements, the first is the whole email address, the second matches one of the capture groups, the third matches the other one.

== Similar

Evaluates if two values are similar, regardless of their type. For example, the string "1234" and the number 1234 aren't equal, but they are recognized as similar.

.Transform
[source, ruby]
------------------------------------------------------------------
%dw 1.0
%output application/json
---
{
    a: "1234" == 1234,
    b: "1234" ~= 1234,
    c: "true" == true,
    d: "true" ~= true
}
------------------------------------------------------------------

.Output
[source,json]
------------------------------------------------------------------
{
  "a": false,
  "b": true,
  "c": false,
  "d": true
}
------------------------------------------------------------------


== Upper

Returns the provided string in uppercase characters

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  name: upper "mulesoft"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "name": MULESOFT
}
--------------------------------------------------------


== Lower

Returns the provided string in lowercase characters

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  name: lower "MULESOFT"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "name": mulesoft
}
--------------------------------------------------------


== Camelize

Returns the provided string in camel case

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: camelize "customer",
  b: camelize "customer_first_name",
  c: camelize "customer name"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "customer",
  "b": "customerFirstName",
  "c": "customer name"
}
--------------------------------------------------------

== Capitalize

Returns the provided string with every word starting with a capital letter and no underscores.

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: capitalize "customer",
  b: capitalize "customer_first_name",
  c: capitalize "customer NAME"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "Customer",
  "b": "Customer First Name",
  "c": "Customer Name"
}
--------------------------------------------------------

== Dasherize

Returns the provided string with every word separated by a dash.

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: dasherize "customer",
  b: dasherize "customer_first_name",
  c: dasherize "customer NAME"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "customer",
  "b": "customer-first-name",
  "c": "customer-NAME"
}
--------------------------------------------------------

== Underscore

Returns the provided string with every word separated by an underscore.

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: underscore "customer",
  b: underscore "customer-first-name",
  c: underscore "customer NAME"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "customer",
  "b": "customer_first_name",
  "c": "customer_NAME"
}
--------------------------------------------------------


== Ordinalize

Returns the provided numbers set as ordinals.

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: ordinalize 1,
  b: ordinalize 8,
  c: ordinalize 103
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "1st",
  "b": "8th",
  "c": "103rd"
}
--------------------------------------------------------

== Pluralize

Returns the provided string transformed into its plural form.

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: pluralize "box",
  b: pluralize "wife",
  c: pluralize "foot"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "boxes",
  "b": "wives",
  "c": "feet"
}
--------------------------------------------------------

== Singularize

Returns the provided string transformed into its singular form.

[source, ruby]
--------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: singularize "boxes",
  b: singularize "wives",
  c: singularize "feet"
}
--------------------------------------------------------

[source,json]
--------------------------------------------------------
{
  "a": "box",
  "b": "wife",
  "c": "foot"
}
--------------------------------------------------------


== Basic Math Operations

=== Sum

.Transform
[source, ruby]
----------------------------------------------------------
%dw 1.0
%output application/xml
---
plus : 2 + 2.5
----------------------------------------------------------

=== Minus

.Transform
[source, ruby]
----------------------------------------------------------
%dw 1.0
%output application/xml
---
minus : 2.5 - 2
----------------------------------------------------------

=== Multiply

.Transform
[source, ruby]
----------------------------------------------------------
%dw 1.0
%output application/xml
---
multiply : 2.5 * 2
----------------------------------------------------------

=== Division

.Transform
[source, ruby]
----------------------------------------------------------
%dw 1.0
%output application/xml
---
division : 10 / 2
----------------------------------------------------------

=== Max

Returns the highest number in an array or object.

.Transform
[source, ruby]
----------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: max [1..1000],
  b: max [1, 2, 3],
  d: max [1.5, 2.5, 3.5]
}
----------------------------------------------------------

.Output
[source,json]
----
{
  "a": 1000,
  "b": 3,
  "d": 3.5
}
----

=== Min

Returns the lowest number in an array or object.

.Transform
[source, ruby]
----------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: min [1..1000],
  b: min [1, 2, 3],
  d: min [1.5, 2.5, 3.5]
}
----------------------------------------------------------

.Output

[source,json]
----
{
  "a": 1,
  "b": 1,
  "d": 1.5
}
----

== Date Time Operations


=== Now

Returns a time stap

.Transform

[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
---
{
  a: now,
  b: now.day,
  c: now.minutes
}
-----------------------------------------------------------------

.Output

[source,json]
-----------------------------------------------------------------
{
  "a": |2015-05-22|,
  "b": 22,
  "c": 57
}
-----------------------------------------------------------------


=== Append Time Zone

Appends a time zone to a date type value

.Transform

[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
---
a: |2003-10-01T23:57:59| ++ |-03:00|
-----------------------------------------------------------------

.Output

[source,json]
-----------------------------------------------------------------
{
  "a": "2003-10-01T23:57:59-03:00"
}
-----------------------------------------------------------------

=== Shift Time Zone

Shift a date time to the specified timezone

.Transform
[source, ruby]
-----------------------------------------------------------------
%dw 1.0
%output application/json
---
a: |2014-01-01T14:00-03:00| >> |-08:00|
-----------------------------------------------------------------

.Output
[source,json]
-----------------------------------------------------------------
{
  "a": "2014-01-01T09:00-08:00"
}
-----------------------------------------------------------------

=== Adding a Period of Time

Add or subtract a period of time from a given date.

.Transform
[source, ruby]
----------------------------------------------------------------
%dw 1.0
%output application/json
---
c: |2003-10-01T23:57:59Z| + |P1Y|
----------------------------------------------------------------

.Output
[source,json]
----------------------------------------------------------------
{
  "c": "2004-10-01T23:57:59Z"
}
----------------------------------------------------------------

=== Global MEL Functions

Your DataWeave code can call any function you define as a global link:https://developer.mulesoft.com/docs/display/current/Mule+Expression+Language+MEL[Mule Expression Language (MEL)] function, as long as it is correctly defined in the Mule Project where your Transform Message element sits.

Refer to https://developer.mulesoft.com/docs/display/current/Using+DataWeave+in+Studio[DataWeave in Studio].
