= Adding XML elements based on a condition

It is very common when mapping to Xml that we want to output a tag based on a condition.
For example in this mapping we are going to insert the insurance tag only if it is present in the input
.Input
[source,json]
---------------------------------------------------------
[
  {
    "name" : "Julian",
    "gender" : "Male",
    "age" : 41,
    "insurance": "Osde"
  },
  {
    "name" : "Mariano",
    "gender" : "Male",
    "age" : 33
  }
]
---------------------------------------------------------

.Transform
[source,ruby]
---------------------------------------------------------
%dw 1.0
%input payload application/json
%output application/xml
---
users: {
  (
    payload map {
        user: {
          (insurance: $.insurance) when $.insurance?,
          name: $.name
        }
    }
  )
}
---------------------------------------------------------

.Output
[source,xml]
---------------------------------------------------------
<?xml version='1.0' encoding='US-ASCII'?>
<users>
  <user>
    <insurance>Osde</insurance>
    <name>Julian</name>
  </user>
  <user>
    <name>Mariano</name>
  </user>
</users>
---------------------------------------------------------

= Traversing an XML

It is very common to need to traverse an xml for different transformation.

== Mapping the keys

Making all the keys lower case. In this example we create a function that receives the element to be traverse and the function to which all the

.Input
[source,xml]
---------------------------------------------------------
<CATALOG>
  <CD>
    <TITLE name="foo">Empire Burlesque</TITLE>
    <ARTIST>Bob Dylan</ARTIST>
    <COUNTRY>USA</COUNTRY>
    <COMPANY>Columbia</COMPANY>
    <PRICE>10.90</PRICE>
    <YEAR>1985</YEAR>
  </CD>
  <CD>
    <TITLE>Hide your heart</TITLE>
    <ARTIST>Bonnie Tyler</ARTIST>
    <COUNTRY>UK</COUNTRY>
    <COMPANY>CBS Records</COMPANY>
    <PRICE>9.90</PRICE>
    <YEAR>1988</YEAR>
  </CD>
</CATALOG>
---------------------------------------------------------

.Transform
[source,ruby]
---------------------------------------------------------
%dw 1.0
%input payload application/xml
%output application/xml
%function mapKeys(element, func)
  element match {
    obj is :object -> obj mapObject {
      "$(func($$))" @(($$.@ when $.@? otherwise {}) ): mapKeys($, func)
    },
    default -> element
  }
---
mapKeys(payload, ((key) ->(lower key)))
---------------------------------------------------------

.Output
[source,xml]
---------------------------------------------------------
<?xml version='1.0' encoding='US-ASCII'?>
<catalog>
  <cd>
    <title name="foo">Empire Burlesque</title>
    <artist>Bob Dylan</artist>
    <country>USA</country>
    <company>Columbia</company>
    <price>10.90</price>
    <year>1985</year>
  </cd>
  <cd>
    <title>Hide your heart</title>
    <artist>Bonnie Tyler</artist>
    <country>UK</country>
    <company>CBS Records</company>
    <price>9.90</price>
    <year>1988</year>
  </cd>
</catalog>
---------------------------------------------------------

== Removing unwanted attributes

We may want to remove attributes that has sensitive value before send it to an endpoint.

.Input
[source,xml]
---------------------------------------------------------
<users>
  <user username="Julian" password="1234"/>
  <user username="Mariano" password="4321"/>
</users>
---------------------------------------------------------

.Transform
[source,ruby]
---------------------------------------------------------

---------------------------------------------------------
